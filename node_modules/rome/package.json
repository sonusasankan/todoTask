{
  "_args": [
    [
      {
        "raw": "rome@git+https://github.com/jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
        "scope": null,
        "escapedName": "rome",
        "name": "rome",
        "rawSpec": "git+https://github.com/jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
        "spec": "git+https://github.com/jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
          "sshUrl": "git+ssh://git@github.com/jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
          "httpsUrl": "git+https://github.com/jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
          "gitUrl": "git://github.com/jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
          "shortcut": "github:jwhitfieldseed/rome#19f5d3031a922c29c52b9038b2832a827e5e99d6",
          "directUrl": "https://raw.githubusercontent.com/jwhitfieldseed/rome/19f5d3031a922c29c52b9038b2832a827e5e99d6/package.json"
        }
      },
      "G:\\projects\\todoTask\\node_modules\\material-datetime-picker"
    ]
  ],
  "_from": "git+https://github.com/jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
  "_id": "rome@2.1.22",
  "_inCache": true,
  "_location": "/rome",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rome@git+https://github.com/jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
    "scope": null,
    "escapedName": "rome",
    "name": "rome",
    "rawSpec": "git+https://github.com/jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
    "spec": "git+https://github.com/jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
      "sshUrl": "git+ssh://git@github.com/jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
      "httpsUrl": "git+https://github.com/jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
      "gitUrl": "git://github.com/jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
      "shortcut": "github:jwhitfieldseed/rome#19f5d3031a922c29c52b9038b2832a827e5e99d6",
      "directUrl": "https://raw.githubusercontent.com/jwhitfieldseed/rome/19f5d3031a922c29c52b9038b2832a827e5e99d6/package.json"
    }
  },
  "_requiredBy": [
    "/material-datetime-picker"
  ],
  "_resolved": "git+https://github.com/jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
  "_shasum": "2fdac32856ae97a79debccc156fa433230e5873f",
  "_shrinkwrap": null,
  "_spec": "rome@git+https://github.com/jwhitfieldseed/rome.git#19f5d3031a922c29c52b9038b2832a827e5e99d6",
  "_where": "G:\\projects\\todoTask\\node_modules\\material-datetime-picker",
  "author": {
    "name": "Nicolas Bevacqua",
    "email": "hello@bevacqua.io",
    "url": "http://ponyfoo.com"
  },
  "bugs": {
    "url": "https://github.com/bevacqua/rome/issues"
  },
  "dependencies": {
    "bullseye": "1.4.6",
    "contra": "^1.9.4",
    "crossvent": "1.5.0",
    "moment": "^2.8.2"
  },
  "description": "Customizable date (and time) picker. Opt-in UI, no jQuery!",
  "devDependencies": {
    "browserify": "^10.2.4",
    "gulp": "^3.8.6",
    "gulp-bump": "^0.1.8",
    "gulp-clean": "^0.2.4",
    "gulp-git": "^0.4.2",
    "gulp-header": "^1.0.2",
    "gulp-minify-css": "^0.3.4",
    "gulp-rename": "^1.2.0",
    "gulp-size": "^0.3.1",
    "gulp-streamify": "0.0.5",
    "gulp-stylus": "^1.0.0",
    "gulp-uglify": "^0.3.0",
    "gulp-util": "^3.0.6",
    "gulp-watch": "^0.6.8",
    "lodash.assign": "^3.2.0",
    "nib": "^1.0.3",
    "vinyl-source-stream": "^0.1.1",
    "watchify": "^3.2.3"
  },
  "gitHead": "19f5d3031a922c29c52b9038b2832a827e5e99d6",
  "homepage": "https://github.com/bevacqua/rome",
  "license": "MIT",
  "main": "src/rome.moment.js",
  "name": "rome",
  "optionalDependencies": {},
  "readme": "# rome\r\n\r\n[![help me on gittip](http://gbindex.ssokolow.com/img/gittip-43x20.png)](https://www.gittip.com/bevacqua/) [![flattr.png](https://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=nzgb&url=https%3A%2F%2Fgithub.com%2Fbevacqua%2Frome)\r\n\r\n> Customizable date _(and time)_ picker. Opt-in UI, no jQuery!\r\n\r\nRome wasn't built in a day. Browser support includes every sane browser and **IE7+**.\r\n\r\n#### Demo!\r\n\r\nYou can [see a live demo here][3].\r\n\r\n[![screenshot.png][4]][3]\r\n\r\nOh, `rome` synchronizes in real-time with inputs, never steals focus, and its CSS is entirely customizable!\r\n\r\n<sub>Rome depends on [`moment`][6]. It doesn't depend on jQuery or other weird frameworks, though.\r\n\r\n## Install\r\n\r\nFrom npm or Bower.\r\n\r\n```shell\r\nnpm install --save rome\r\n```\r\n\r\n```shell\r\nbower install --save rome\r\n```\r\n\r\nNote that if you're using the standalone version, the API is published under the `rome` global. If you're using CJS, then you'll have to `require('rome')`.\r\n\r\n### Setup\r\n\r\nYou can use your own distribution of [`moment`][6], using `rome.standalone.js`.\r\n\r\n```html\r\n<script src='moment.js'></script>\r\n<script src='rome.standalone.js'></script>\r\n```\r\n\r\nYou could just use the bundled `rome.js` distribution, which comes with [`moment`][6] in it.\r\n\r\n```html\r\n<script src='rome.js'></script>\r\n```\r\n\r\nIf you need to do anything regarding internationalization, [refer to `moment` for that][5]. Ideally, make those changes before starting to create Rome calendar components.\r\n\r\n## API\r\n\r\nThe API in `rome` exposes a few properties.\r\n\r\n### `rome.find(elem)`\r\n\r\nIf a calendar is associated to the provided `elem`, then that calendar is returned, otherwise returns `null`. DOM elements can only have one associated calendar.\r\n\r\n### `rome(elem, options={})`\r\n\r\nThis method creates a calendar instance and associates it to the provided `elem`. This association can't be undone even by `.destroy()`ing the `rome` instance, because it can be `.restore()`d later. Subsequent calls to `rome(elem)` will return the associated calendar, instead of creating a new one _<sub>(see `rome.find(elem)`)</sub>_. Think of this as a _\"caching feature\"_.\r\n\r\nCreating a calendar has a ton of options. These have reasonable defaults that are easy to adjust, too. The options are listed below.\r\n\r\nOption             | Description\r\n-------------------|--------------------------------------------------------------------------------------------------\r\n`appendTo`         | DOM element where the calendar will be appended to. Takes `'parent'` as the parent element\r\n`autoClose`        | When set to `true`, the calendar is auto-closed when picking a day _(or a time if `time: true` and `date: false`). A value of `'time'` will only auto-close the calendar when a time is picked.\r\n`autoHideOnBlur`   | Hides the calendar when focusing something other than the input field\r\n`autoHideOnClick`  | Hides the calendar when clicking away\r\n`date`             | The calendar shows days and allows you to navigate between months\r\n`dateValidator`    | Function to validate that a given date is considered valid. Receives a native `Date` parameter.\r\n`dayFormat`        | Format string used to display days on the calendar\r\n`initialValue`     | Value used to initialize calendar. Takes `string`, `Date`, or `moment`\r\n`inputFormat`      | Format string used for the input field as well as the results of `rome`\r\n`invalidate`       | Ensures the date is valid when the field is blurred\r\n`strictParse`      | Compares input strictly against `inputFormat`, and partial matches are discarded\r\n`max`              | Disallow dates past `max`. Takes `string`, `Date`, or `moment`\r\n`min`              | Disallow dates before `min`. Takes `string`, `Date`, or `moment`\r\n`monthFormat`      | Format string used by the calendar to display months and their year\r\n`monthsInCalendar` | How many months get rendered in the calendar\r\n`required`         | Is the field required or do you allow empty values?\r\n`styles`           | CSS classes applied to elements on the calendar\r\n`time`             | The calendar shows the current time and allows you to change it using a dropdown\r\n`timeFormat`       | Format string used to display the time on the calendar\r\n`timeInterval`     | Seconds between each option in the time dropdown\r\n`timeValidator`    | Function to validate that a given time is considered valid. Receives a native `Date` parameter.\r\n`weekdayFormat`    | Format used to display weekdays. Takes `min` _(Mo)_, `short` _(Mon)_, `long` _(Monday)_, or an array with seven strings of your choosing.\r\n`weekStart`        | Day considered the first of the week. Range: Sunday `0` - Saturday `6`\r\n\r\nNote that in the case of input fields, when `initialValue` isn't provided the initial value is inferred from `elem.value` instead. In the case of inline calendars, `new Date()` will be used as a default if none is provided.\r\n\r\n#### Inlining the Calendar\r\n\r\nIf you pass in an element other than an input tag, then this method behaves slightly differently. The difference is that `appendTo` becomes the provided `elem`, and the calendar won't attach itself to an input element. The options listed below will be ignored.\r\n\r\n- `autoHideOnBlur`, because there is no input field that can be tracked for `blur` events\r\n- `invalidate`, because there is no input field to keep consistent with the calendar component\r\n- `required`, because you can easily do that on an input field\r\n- `styles.positioned`, because the calendar will be considered inlined\r\n\r\nAll of the other options still apply, and identical behavior should be expected.\r\n\r\n#### Default Options\r\n\r\nIf you don't set an option, the default will be used. You can [look up the defaults here][1], or below.\r\n\r\n```json\r\n{\r\n  \"appendTo\": document.body,\r\n  \"autoClose\": true,\r\n  \"autoHideOnBlur\": true,\r\n  \"autoHideOnClick\": true,\r\n  \"date\": true,\r\n  \"dateValidator\": Function.prototype,\r\n  \"dayFormat\": \"DD\",\r\n  \"initialValue\": null,\r\n  \"inputFormat\": \"YYYY-MM-DD HH:mm\",\r\n  \"invalidate\": true,\r\n  \"max\": null,\r\n  \"min\": null,\r\n  \"monthFormat\": \"MMMM YYYY\",\r\n  \"monthsInCalendar\": 1,\r\n  \"required\": false,\r\n  \"strictParse\": false,\r\n  \"styles\": {\r\n    \"back\": \"rd-back\",\r\n    \"container\": \"rd-container\",\r\n    \"date\": \"rd-date\",\r\n    \"dayBody\": \"rd-days-body\",\r\n    \"dayBodyElem\": \"rd-day-body\",\r\n    \"dayConcealed\": \"rd-day-concealed\",\r\n    \"dayDisabled\": \"rd-day-disabled\",\r\n    \"dayHead\": \"rd-days-head\",\r\n    \"dayHeadElem\": \"rd-day-head\",\r\n    \"dayRow\": \"rd-days-row\",\r\n    \"dayTable\": \"rd-days\",\r\n    \"month\": \"rd-month\",\r\n    \"next\": \"rd-next\",\r\n    \"positioned\": \"rd-container-attachment\",\r\n    \"selectedDay\": \"rd-day-selected\",\r\n    \"selectedTime\": \"rd-time-selected\",\r\n    \"time\": \"rd-time\",\r\n    \"timeList\": \"rd-time-list\",\r\n    \"timeOption\": \"rd-time-option\"\r\n  },\r\n  \"time\": true,\r\n  \"timeFormat\": \"HH:mm\",\r\n  \"timeInterval\": 1800,\r\n  \"timeValidator\": Function.prototype,\r\n  \"weekdayFormat\": \"min\",\r\n  \"weekStart\": moment().weekday(0).day()\r\n}\r\n```\r\n\r\n#### Rome API\r\n\r\nWhen you create a calendar with `rome(elem)`, you'll get a `cal` instance back. This has a few API methods. Most of these methods return the calendar instance whenever possible, allowing for method chaining.\r\n\r\n##### `.show()`\r\n\r\nShows the calendar. If associated with an input, the calendar gets absolutely position right below the input field.\r\n\r\n##### `.hide()`\r\n\r\nHides the calendar.\r\n\r\n##### `.id`\r\n\r\nAuto-generated unique identifier assigned to this instance of Rome.\r\n\r\n##### `.container`\r\n\r\nThe DOM element that contains the calendar.\r\n\r\n##### `.associated`\r\n\r\nThe associated DOM element assigned to this calendar instance. This is the input field or parent element that you used to create the calendar.\r\n\r\n##### `.getDate()`\r\n\r\nReturns the current date, as defined by the calendar, in a native `Date` object. If `required: false` you'll get `null` when the input field is empty.\r\n\r\n##### `.getDateString(format?)`\r\n\r\nReturns the current date, as defined by the calendar, using the provided `options.inputFormat` format string or a format of your choosing. If `required: false` you'll get `null` when the input field is empty.\r\n\r\n##### `.getMoment()`\r\n\r\nReturns a copy of the `moment` object underlying the current date in the calendar. If `required: false` you'll get `null` when the input field is empty.\r\n\r\n##### `.destroy()`\r\n\r\nRemoves the calendar from the DOM and all of its associated DOM event listeners. The only responsive API method becomes the `.restore` method described below, the rest of the API becomes no-op methods. After emitting the `destroyed` event, all event listeners are removed from the instance.\r\n\r\n##### `.destroyed`\r\n\r\nReturns `true` when the calendar is in a destroyed state and `false` otherwise.\r\n\r\n##### `.restore(options?)`\r\n\r\nRestores the calendar, using the provided options (or the default options). The associated DOM element can't be changed. The API methods are restored to their original functionality.\r\n\r\n##### `.options(options?)`\r\n\r\nIf an options object is provided, it destroys the calendar and initializes it with the provided options. Effectively the same as calling `.restore(options)` immediately after calling `.destroy()`.\r\n\r\nIf no options object is provided, a copy of the current options is returned.\r\n\r\n##### `.options.reset()`\r\n\r\nResets the options to the factory defaults. Effectively the same as calling `.options({})` while preserving the `appendTo` option.\r\n\r\n##### `.emitValues()`\r\n\r\nEmits all of the data events listed below. Mostly used internally, **should be avoided** in consumer-land.\r\n\r\n##### `.setValue(value)`\r\n\r\nSets the current date to the provided `value`, but only if that value is valid according to the rules defined by the calendar. Takes `string`, `Date`, or `moment`. Mostly used internally, and it doesn't emit any events.\r\n\r\n##### `.refresh()`\r\n\r\nForces a refresh of the calendar. This method will redraw the month and update the dates that can be selected in accordance with `dateValidator` and `timeValidator`.\r\n\r\n##### `.back()`\r\n\r\nSteps the calendar display back by one month. Equivalent to clicking the 'back' button.\r\nReturns `undefined`.\r\n\r\n##### `.next()`\r\n\r\nSteps the calendar display forward by one month. Equivalent to clicking the 'next' button.\r\nReturns `undefined`.\r\n\r\n#### Events\r\n\r\nRome calendars also provide a few events you can subscribe to. These events are published through an event emitter created using [`contra`][2]. These events are listed below.\r\n\r\nEvent       | Arguments   | Description\r\n------------|-------------|------------\r\n`ready`     | `[options]` | The calendar has been `.restore`d\r\n`destroyed` | `[]`        | The calendar has been `.destroy`ed\r\n`data`      | `[value]`   | The date may have been updated by the calendar. Value of `.getDateString()` is provided\r\n`year`      | `[year]`    | The year may have been updated by the calendar. Value of `moment.year()` is provided\r\n`month`     | `[month]`   | The month may have been updated by the calendar. Value of `moment.month()` is provided\r\n`day`       | `[day]`     | The day may have been updated by the calendar. Value of `moment.date()` is provided\r\n`time`      | `[time]`    | The time may have been updated by the calendar. Formatted time string is provided\r\n`show`      | `[]`        | The calendar has been displayed\r\n`hide`      | `[]`        | The calendar has been hidden\r\n`back`      | `[month]`   | The calendar view has been moved back a month to the value `moment.month()`\r\n`next`      | `[month]`   | The calendar view has been moved forward a month to the value `moment.month()`\r\n\r\n#### Date and Time Validator\r\n\r\nPlease note that `dateValidator` and `timeValidator` both receive a native `Date` object as a parameter. These methods are expected to return `undefined` or `true` if the date is deemed valid, and `false` in case the date is invalid. If `dateValidator` returns `false`, the validation process will try to find a valid date near the desired date.\r\n\r\nIf `dateValidator` passes for a given date, the `timeValidator` will attempt to validate that date as well. If the time is invalid, the day will be probed for a valid time. This validation starts at the desired time, and grows in `timeInterval` increments. When the end of the day is reached, validation resumes at the start of the day instead of leaping to the next day.\r\n\r\n### `rome.val`\r\n\r\nThere are a few default validator factories provided by Rome to make your life easier.\r\n\r\nThese methods take a `moment`, a `Date`, a `string` that can be parsed into a `moment` using `inputFormat`, or a DOM element that Rome could use to look up another Rome instance.\r\n\r\nIf you passed in a DOM element, the validator will look up the associated Rome instance and validate using its value. The first time the validator is executed on any inline calendar, the `'data'` event for that calendar will be hooked to refresh the related calendar.\r\n\r\nFor usage examples you can [refer to the demos][3].\r\n\r\n#### `rome.val.afterEq(value)`\r\n\r\nReturns whether the date is after the provided value. The comparison uses `>=`, meaning it's inclusive.\r\n\r\n#### `rome.val.after(value)`\r\n\r\nReturns whether the date is after the provided value. The comparison uses `>`, meaning it's exclusive.\r\n\r\n#### `rome.val.beforeEq(value)`\r\n\r\nReturns whether the date is before the provided value. The comparison uses `<=`, meaning it's inclusive.\r\n\r\n#### `rome.val.before(value)`\r\n\r\nReturns whether the date is before the provided value. The comparison uses `<`, meaning it's exclusive.\r\n\r\n#### `rome.val.except(left, right)`\r\n\r\nReturns whether the date is any date except the provided value. You can provide a wide variety of input values. Keep in mind `Date`, `string`, `moment`, and the DOM element used to find another calendar are all valid input types.\r\n\r\n##### Providing `left` only means **\"any date except this one\"**\r\n\r\nIf you use `rome.val.except('2014-08-09')`, then `'2014-08-09'` is invalid.\r\n\r\n##### Providing `left` and `right` means **\"any date that's not in this range\"**\r\n\r\nIf you use `rome.val.except('2014-08-09', '2014-09-01')`, then anything between `'2014-08-09'` and `'2014-09-01'` is invalid.\r\n\r\n##### If `left` is an array, each element in the array is treated as the simple case described above\r\n\r\nIn this case, `right` is completely ignored. Every item in the array is treated as follows.\r\n\r\n###### If the item is single, then a rule is built on that single date\r\n\r\nUsing `rome.val.except(['2014-08-09', '2014-09-01'])` means that `'2014-08-09'` and `'2014-09-01'` are both invalid dates.\r\n\r\n###### If the item is an array, the first two items are used to determine a date range\r\n\r\nUsing `rome.val.except([['2014-08-09', '2014-09-01']])` means anything between `'2014-08-09'` and `'2014-09-01'` is invalid.\r\n\r\nThese two types of entries can be combined in any way you like. Each entry will exclude additional dates.\r\n\r\nFor instance, `[['2014-04-05', '2014-04-15'], ['2014-04-25', '2014-04-30'], '2014-05-05']` means that April 05 to 15, and April 25 to 30, along with May 05 are all invalid dates.\r\n\r\n#### `rome.val.only(left, right)`\r\n\r\nIdentical behavior to `rome.val.except`, except for the fact that the selected dates become **the only valid dates**, rather than the **only invalid dates**.\r\n\r\n### `rome.moment`\r\n\r\nExposes the [`moment`][6] instance used by Rome. To change the `moment` instance, refer to `rome.use(moment)`.\r\n\r\n### `rome.use(moment)`\r\n\r\nSets the instance of `moment` used by Rome.\r\n\r\n## Development\r\n\r\nStart by installing any dependencies.\r\n\r\n```shell\r\nnpm install\r\n```\r\n\r\nThen run the Gulp `watch` task.\r\n\r\n```shell\r\ngulp watch\r\n```\r\n\r\nLastly open the page and any changes you make just need a browser refresh.\r\n\r\n```shell\r\nopen index.html\r\n```\r\n\r\n## License\r\n\r\nMIT\r\n\r\n[1]: https://github.com/bevacqua/rome/blob/master/src/defaults.js\r\n[2]: https://github.com/bevacqua/contra\r\n[3]: https://bevacqua.github.io/rome\r\n[4]: https://cloud.githubusercontent.com/assets/934293/3803583/387125ea-1c1c-11e4-974e-467984e4d1f0.png\r\n[5]: http://momentjs.com/docs/#/i18n/\r\n[6]: http://momentjs.com\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/bevacqua/rome.git"
  },
  "version": "2.1.22"
}
